*lazyvim-menu-addon.txt*    For Neovim >= 0.9.0   Last change: 2024 January 06

==============================================================================
Table of Contents                       *lazyvim-menu-addon-table-of-contents*

1. lazyvim-menu-addon                  |lazyvim-menu-addon-lazyvim-menu-addon|
  - Installation          |lazyvim-menu-addon-lazyvim-menu-addon-installation|
  - Examples                  |lazyvim-menu-addon-lazyvim-menu-addon-examples|
  - Configuration        |lazyvim-menu-addon-lazyvim-menu-addon-configuration|
  - Current restrictions|lazyvim-menu-addon-lazyvim-menu-addon-current-restrictions|
  - Adapters                  |lazyvim-menu-addon-lazyvim-menu-addon-adapters|
  - Leader C in LazyVim|lazyvim-menu-addon-lazyvim-menu-addon-leader-c-in-lazyvim|
  - Alternatives          |lazyvim-menu-addon-lazyvim-menu-addon-alternatives|
  - Acknowledgements  |lazyvim-menu-addon-lazyvim-menu-addon-acknowledgements|

==============================================================================
1. lazyvim-menu-addon                  *lazyvim-menu-addon-lazyvim-menu-addon*

**lazyvim-menu-addon** is an add-on for LazyVim
<https://github.com/LazyVim/LazyVim>.

LazyVim <https://github.com/LazyVim/LazyVim> is a Neovim setup powered by
lazy.nvim <https://github.com/folke/lazy.nvim> to make it easy to customize and
extend your config.

**Use-case**

Theuser wishes to change a top-level leader menu supplied by LazyVim
<https://github.com/LazyVim/LazyVim>, in order to use the corresponding leader
key for something else.

The effort required to manually change a top-level menu can be considerable.
For example, when changing `leader c` into `leader C`, each individual key
listed in |lazyvim-menu-addon-leader-c-in-lazyvim| needs to be taken into
consideration.

This addon will perform the changes automatically.

**Features**

Leaderkeys will be changed when defined in:

- plugin definitions
- which-key menu descriptions
- lazyvim.config.keymaps
- nvim-lspconfig

Leader mappings defined by the user will **not** be modified.

The addon is designed to change a leader key into an **available** new leader
key.

A decline in performance is not expected.


INSTALLATION              *lazyvim-menu-addon-lazyvim-menu-addon-installation*

>lua
    { -- insert before LazyVim!
      "abeldekat/lazyvim-menu-addon",
      version = "*",
      import = "lazyvim_menu_addon.hook",
      opts = { leaders_to_change = { f = "F", w = "W" } } -- for example...
    },
    -- add LazyVim and import its plugins
    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
<

_Note_

Theaddon must be inserted before the line that adds LazyVim in the starter
template
<https://github.com/LazyVim/starter/blob/92b2689e6f11004e65376e84912e61b9e6c58827/lua/config/lazy.lua#L12>.


EXAMPLES                      *lazyvim-menu-addon-lazyvim-menu-addon-examples*


CHANGE LEADER F FOR HARPOON ~

>lua
    { 
      "abeldekat/lazyvim-menu-addon",
      import = "lazyvim_menu_addon.hook",
      opts = { leaders_to_change = { f = "F" } }
    },
    -- add LazyVim and import its plugins
    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
    {
      name = "ThePrimeagen/harpoon.nvim",
      keys = { 
        { 
          "<leader>f",
          function() vim.print("Harpoon UI") end,
          desc = "Harpoon UI on leader f" }
        },
    },
<


CHANGE LEADER Q AND LEADER W ~

Map keys for `leader q` to quit and `leader w` to write.

>lua
    { 
      "abeldekat/lazyvim-menu-addon",
      import = "lazyvim_menu_addon.hook",
      opts = { leaders_to_change = { q = "Q", w = "W" } }
    },
    -- add LazyVim and import its plugins
    { "LazyVim/LazyVim", import = "lazyvim.plugins" },
    --
    -- In your keymaps.lua, using a simple map function for vim.keymap.set:
    --
    -- leader q now available:
    -- map("n", "<leader>q", "<cmd>q<cr>", { desc = "[Q]uit" })
    -- leader w now available:
    -- map("n", "<leader>w", "<cmd>w<cr><esc>", { desc = "[W]rite" })
<


CONFIGURATION            *lazyvim-menu-addon-lazyvim-menu-addon-configuration*

>lua
    {
      -- Select the leaders to change and the new value to use:
      ---@type table<string,string>
      leaders_to_change = {
        -- Examples:
        --
        -- ["<tab>"] = "T", -- tabs
        -- b = "B", -- buffer
        -- c = "C", -- code
        -- f = "F", -- file/find
        -- g = "G", -- git
        -- q = "Q", -- quit/session
        -- s = "S", -- search
        -- u = "U", -- ui
        -- w = "W", -- window
        -- x = "X", -- diagnostics/quickfix
      },
    }
<


CURRENT RESTRICTIONS*lazyvim-menu-addon-lazyvim-menu-addon-current-restrictions*


NVIM-LSPCONFIG ~

The algorithm changing keys for `nvim-lspconfig` does not differentiate between
keys defined in `LazyVim`â€™s lsp keys
<https://github.com/LazyVim/LazyVim/blob/879e29504d43e9f178d967ecc34d482f902e5a91/lua/lazyvim/plugins/lsp/keymaps.lua#L15>
and keys defined by the user. Consequently, when changing `leader c`, any
`leader c` defined by the user targeting `nvim-lspconfig` will be changed as
well.

See also: LazyVim docs: lsp keymaps
<https://www.lazyvim.org/configuration/keymaps#lsp-keymaps>


VSCODE EXTRA ~

The vscode extra
<https://github.com/LazyVim/LazyVim/blob/879e29504d43e9f178d967ecc34d482f902e5a91/lua/lazyvim/plugins/extras/vscode.lua#L31>
defines a key for `leader s` that is not intercepted. When using vscode, please
do not change `leader s` using this addon.


JAVA EXTRA ~

The java extra
<https://github.com/LazyVim/LazyVim/blob/879e29504d43e9f178d967ecc34d482f902e5a91/lua/lazyvim/plugins/extras/lang/java.lua#L174>
is the only extra in `extras.lang` using `which-key.register` to map actual
keys. That method is difficult to reliably intercept. When using the java
extra, please do not change `leader c` and `leader t` using this addon.


ADAPTERS                      *lazyvim-menu-addon-lazyvim-menu-addon-adapters*

This addon injects code into the following methods:

- `lazy.nvim plugin add` <https://github.com/folke/lazy.nvim/blob/96584866b9c5e998cbae300594d0ccfd0c464627/lua/lazy/core/plugin.lua#L57>
- `LazyVim lsp keymaps` <https://github.com/LazyVim/LazyVim/blob/879e29504d43e9f178d967ecc34d482f902e5a91/lua/lazyvim/plugins/lsp/keymaps.lua#L15>
- `LazyVim safe-keymap-set` <https://github.com/LazyVim/LazyVim/blob/879e29504d43e9f178d967ecc34d482f902e5a91/lua/lazyvim/util/init.lua#L149>


LEADER C IN LAZYVIM*lazyvim-menu-addon-lazyvim-menu-addon-leader-c-in-lazyvim*

An overview of all `<leader> c` occurrences in the current codebase.


LAZYVIM CORE ~

- `ca`-"Code Action"`nvim-lspconfig` in `lazyvim.plugin.lsp.keymaps`
- `cA`-"Source Action"`nvim-lspconfig` in `lazyvim.plugin.lsp.keymaps`
- `cd`-"Line Diagnostics"_generic key_ in `lazyvim.config.keymaps`
- `cf`-"Format"_generic key_ in `lazyvim.config.keymaps`
- `cF`-"Format Injected Langs"`conform.nvim` in `lazyvim.plugins.format`
- `cl`-"Lsp Info"`nvim-lspconfig` in `lazyvim.plugin.lsp.keymaps`
- `cm`-"Mason"`mason.nvim` in `lazyvim.plugin.lsp`
- `cr`-"Rename"`mason.nvim` in `lazyvim.plugin.lsp`


WHICH-KEY.NVIM ~

>lua
    {
      defaults = {
        -- key descriptions
        ["<leader>c"] = "+coding"
        -- more key descriptions
      }
    }
<


EXTRAS.LANG ~

For example: typescript

- `co`-"Organize Imports"`nvim-lspconfig` in `lazyvim.plugins.extras.lang.typescript`
- `cR`-"Remove Unused Imports"`nvim-lspconfig` in `lazyvim.plugins.extras.lang.typescript`


ALTERNATIVES              *lazyvim-menu-addon-lazyvim-menu-addon-alternatives*


THE MANUAL APPROACH ~

LazyVim <https://github.com/LazyVim/LazyVim> provides a lot of flexibility when
mapping individual keys. However, when the user wants to change a top-level
menu, in order to use that `leader key` for something else, the number of
changes to perform can be considerable.

_Note_

Ipresume that this requirement is not that common.


PROVIDED BY LAZYVIM ~

See this PR <https://github.com/LazyVim/LazyVim/issues/2193> >feature:
configurable single source of truth for keymaps

The solution proposed in this PR implicates a lot of changes to the codebase.
Each key mapping would require a string operation on the leader part and the
actual key.

>lua
    -- suggested
    {
      "PrefixCode" = "<leader>c",
      "KeymapMason" = "%PrefixCode%m",
      "KeymapFormatInjected" = "%PrefixCode%F",
      ...
    }
    
    -- Mason, currently in lazyvim.plugins.lsp:
    {
    
      "williamboman/mason.nvim",
      -- spec
      keys = { { "<leader>cm", "<cmd>Mason<cr>", desc = "Mason" } },
      -- more of the spec
    }
<

The keys in the current codebase are readable on first sight. No need to first
find out what the prefix is mapped to.

The main reason this plugin exists is to provide an alternative to the proposed
solution.

_Note_

Itwould be possible to incorporate the code or ideas supplied by this addon
into the codebase of LazyVim <https://github.com/LazyVim/LazyVim>


ACKNOWLEDGEMENTS      *lazyvim-menu-addon-lazyvim-menu-addon-acknowledgements*




Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
